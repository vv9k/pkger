metadata:
  name: test-suite
  description: pkger testing suite
  arch: x86_64
  license: MIT
  version: 
  - 0.2.0
  - 0.3.0
  skip_default_deps: true
  source:
    - some_dir
    - some_file.txt
    - https://raw.githubusercontent.com/vv9k/pkger/master/LICENSE
  exclude:
    - share
    - info
  images: [ debian, rocky ]
env:
  ENV_VAR_TEST: 'test.com:1010'
configure:
  working_dir: /var/lib
  steps:
    - cmd: >-
        echo SHELL=$0;
        if [ "$0" = "/bin/sh" ]; then exit 0; else echo 'Shell is configure script
        is not set to properly'; exit 1; fi
    - cmd: >-
        echo PWD=$PWD;
        if [ "$PWD" = "/var/lib" ]; then exit 0; else echo 'Working directory of
        configure script is not set properly'; exit 1; fi
build:
  shell: /bin/bash
  steps:
    - cmd: >-
        echo SHELL=$0;
        if [[ $0 == /bin/bash ]]; then exit 0; else echo 'Shell is configure
        script is not set to properly'; exit 1; fi
    - cmd: >-
        echo PWD=$PWD;
        if [[ $PWD == $PKGER_BLD_DIR ]]; then exit 0; else echo 'Working directory
        of build script is not set properly'; exit 1; fi
    - cmd: >-
        echo 'Testing environment variables';
        echo ENV_VAR_TEST=$ENV_VAR_TEST;
        if [[ ! '$ENV_VAR_TEST' =~ /test[.]com[:]1010/ ]]; then exit 0; else echo
        'Environment variable ENV_VAR_TEST is not set properly'; exit 1; fi
    - cmd: >-
        echo 'Testing pkger env variables';
        echo PKGER_OS=$PKGER_OS;
        if [[ $PKGER_OS =~ debian|rocky ]]; then exit 0; else echo 'Environment
        variable PKGER_OS is not set properly'; exit 1; fi
    # This does not always work
    #- cmd: >-
        #echo PKGER_OS_VERSION=$PKGER_OS_VERSION;
        #if [[ $PKGER_OS_VERSION =~ 10|8 ]]; then exit 0; else echo 'Environment
        #variable PKGER_OS_VERSION is not set properly'; exit 1; fi
    - cmd: >-
        echo PKGER_BLD_DIR=$PKGER_BLD_DIR;
        if [[ $PKGER_BLD_DIR =~ /tmp/test-suite-build-[0-9]* ]]; then exit 0; else
        echo 'Environment variable PKGER_BLD_DIR is not set properly'; exit 1; fi
    - cmd: >-
        echo PKGER_OUT_DIR=$PKGER_OUT_DIR;
        if [[ $PKGER_OUT_DIR =~ /tmp/test-suite-out-[0-9]* ]]; then exit 0; else
        echo 'Environment variable PKGER_OUT_DIR is not set properly'; exit 1; fi
    - cmd: >-
        echo RECIPE=$RECIPE;
        if [[ $RECIPE =~ test-suite ]]; then exit 0; else
        echo 'Environment variable RECIPE is not set properly'; exit 1; fi

    - cmd: >-
        echo RECIPE_VERSION=$RECIPE_VERSION;
        if [[ $RECIPE_VERSION =~ 0.[23].0 ]]; then exit 0; else
        echo 'Environment variable RECIPE_VERSION is not set properly'; exit 1; fi
    - versions: [ 0.2.0 ]
      cmd: echo "from_0.2.0" > /tmp/only_version_0.2.0
    - versions: [ 0.3.0 ]
      cmd: echo "from_0.3.0" > /tmp/only_version_0.3.0
    - versions: [ 0.2.0 ]
      cmd: >-
        if [ ! -f '/tmp/only_version_0.2.0' ]; then echo 'File /tmp/only_version_0.2.0 should
        exist on build version 0.2.0'; exit 1; fi
    - versions: [ 0.2.0 ]
      cmd: >-
        if [ -f '/tmp/only_version_0.3.0' ]; then echo 'File /tmp/only_version_0.3.0 shouldnt
        exist on build version 0.2.0'; exit 1; fi
    - versions: [ 0.3.0 ]
      cmd: >-
        if [ ! -f '/tmp/only_version_0.3.0' ]; then echo 'File /tmp/only_version_0.3.0 should
        exist on build version 0.3.0'; exit 1; fi
    - versions: [ 0.3.0 ]
      cmd: >-
        if [ -f '/tmp/only_version_0.2.0' ]; then echo 'File /tmp/only_version_0.2.0 shouldnt
        exist on build version 0.3.0'; exit 1; fi
    - cmd: >-
        echo RECIPE_RELEASE=$RECIPE_RELEASE;
        if [[ $RECIPE_RELEASE =~ 0 ]]; then exit 0; else
        echo 'Environment variable RECIPE_RELEASE is not set properly'; exit 1; fi

    - cmd: echo 'Testing pkger command syntax'
    # test if pkger commands work correctly
    - images: ["rocky"]
      cmd: touch /tmp/only_rocky
    # assure the file exists on rocky
    - images: ["rocky"]
      cmd: >-
        if [ ! -f '/tmp/only_rocky' ]; then echo 'File /tmp/only_rocky should
        exist on image rocky'; exit 1; fi
    # assure the file doesn't exist on debian
    - images: ["debian"]
      cmd: >-
        if [ -f '/tmp/only_rocky' ]; then echo 'File /tmp/only_rocky shouldnt
        exist on image debian'; exit 1; fi
    - images: ["rocky", "debian"]
      cmd: touch /tmp/pkger_group
    # assure the file exists on both images
    - images: ["rocky", "debian"]
      cmd: >-
        if [ ! -f '/tmp/pkger_group' ]; then echo 'File /tmp/pkger_group should
        exist on image both rocky and debian'; exit 1; fi
    # assure the file exists on both images
    - cmd: ls -l $PKGER_BLD_DIR
    - cmd: >-
        if [[ $(cat $PKGER_BLD_DIR/some_file.txt) =~ hello! ]]; then exit 0; else
        echo "Test file $PKGER_BLD_DIR/some_file.txt has invalid content"; exit 1; fi
    - cmd: >-
        if [[ $(cat $PKGER_BLD_DIR/some_dir/some_file2.txt) =~ hello2! ]]; then exit 0; else
        echo "Test file $PKGER_BLD_DIR/some_dir/some_file2.txt has invalid content"; exit 1; fi
    - cmd: >-
        if [[ $(cat $PKGER_BLD_DIR/LICENSE) =~ "MIT License" ]]; then exit 0; else
        echo "Test file $PKGER_BLD_DIR/LICENSE has invalid content"; exit 1; fi
install:
  steps:
    - cmd: >-
        echo $PWD;
        if [ "$PWD" = "$PKGER_OUT_DIR" ]; then exit 0; else echo 'Working
        directory of install script is not set properly'; exit 1; fi
    - cmd: mkdir -p share/test/123 info/dir/to/remove
